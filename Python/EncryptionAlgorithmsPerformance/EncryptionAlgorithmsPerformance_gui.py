#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Aug 01, 2019 04:00:12 PM CEST  platform: Windows NT

import sys
import random
try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import EncryptionAlgorithmsPerformance_gui_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    EncryptionAlgorithmsPerformance_gui_support.set_Tk_var()
    top = Toplevel1 (root)
    EncryptionAlgorithmsPerformance_gui_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    EncryptionAlgorithmsPerformance_gui_support.set_Tk_var()
    top = Toplevel1 (w)
    EncryptionAlgorithmsPerformance_gui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def generate_File(self,event):
        letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',
                   's', 't', 'u', 'v', 'w', 'x', 'y', 'z', " "]
        if(self.cmbFile.get() == "1Kb"):
            f = open("textfile.txt","w+")
            for i in range(1024-114):
                f.write(letters.__getitem__(random.randint(0,25)))
                if(i % 8 == 0):
                    f.write(letters.__getitem__(26))
        elif (self.cmbFile.get() == "10Kb"):
            f = open("textfile.txt", "w+")
            for i in range((1024 - 114)*10):
                f.write(letters.__getitem__(random.randint(0, 25)))
                if (i % 8 == 0):
                    f.write(letters.__getitem__(26))
        elif (self.cmbFile.get() == "100Kb"):
            f = open("textfile.txt", "w+")
            for i in range((1024 - 114)*100):
                f.write(letters.__getitem__(random.randint(0, 25)))
                if (i % 8 == 0):
                    f.write(letters.__getitem__(26))
        elif (self.cmbFile.get() == "1000Kb"):
            f = open("textfile.txt", "w+")
            for i in range((1024 - 114) * 1000):
                f.write(letters.__getitem__(random.randint(0, 25)))
                if (i % 8 == 0):
                    f.write(letters.__getitem__(26))

    def set_keySize(self,event):
        if(self.cmbAlgorithm.get() == "AES"):
            self.cmbKeySize['values'] = ("128","192","256")
        elif(self.cmbAlgorithm.get() == "DES"):
            self.cmbKeySize['values'] = ("56")
        elif (self.cmbAlgorithm.get() == "3DES"):
            self.cmbKeySize['values'] = ("112","168")
        elif (self.cmbAlgorithm.get() == "Blowfish"):
            self.cmbKeySize['values'] = ("32","128","256","448")
        elif (self.cmbAlgorithm.get() == "RC4"):
            self.cmbKeySize['values'] = ("128","256","1024")



    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1084x775+320+136")
        top.title("New Toplevel")
        top.configure(background="#f4f4f4")
        top.configure(highlightbackground="#FF0000")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.0, rely=0.116, relheight=0.885, relwidth=0.183)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#243a51")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(width=105)

        self.Frame2 = tk.Frame(top)
        self.Frame2.place(relx=0.0, rely=0.0, relheight=0.111, relwidth=1.0)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#243a51")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(width=125)

        self.Frame3 = tk.Frame(top)
        self.Frame3.place(relx=0.221, rely=0.194, relheight=0.221
                , relwidth=0.225)
        self.Frame3.configure(relief='raised')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="raised")
        self.Frame3.configure(background="#FFFFFF")
        self.Frame3.configure(highlightbackground="#d9d9d9")
        self.Frame3.configure(highlightthickness="2")
        self.Frame3.configure(width=125)

        self.TSeparator1 = ttk.Separator(self.Frame3)
        self.TSeparator1.place(relx=0.164, rely=0.702, relwidth=0.615)

        self.cmbFile = ttk.Combobox(self.Frame3)
        self.cmbFile.place(relx=0.164, rely=0.409, relheight=0.152
                , relwidth=0.643)
        self.cmbFile['values'] = ("1Kb","10Kb","100Kb","1000Kb")
        self.cmbFile.configure(takefocus="")
        self.cmbFile.bind("<<ComboboxSelected>>", self.generate_File)

        self.Frame3_3 = tk.Frame(top)
        self.Frame3_3.place(relx=0.747, rely=0.194, relheight=0.221
                , relwidth=0.225)
        self.Frame3_3.configure(relief='raised')
        self.Frame3_3.configure(borderwidth="2")
        self.Frame3_3.configure(relief="raised")
        self.Frame3_3.configure(background="#FFFFFF")
        self.Frame3_3.configure(highlightbackground="#d9d9d9")
        self.Frame3_3.configure(highlightthickness="2")
        self.Frame3_3.configure(width=125)

        self.TSeparator1_10 = ttk.Separator(self.Frame3_3)
        self.TSeparator1_10.place(relx=0.205, rely=0.702, relwidth=0.615)

        self.cmbKeySize = ttk.Combobox(self.Frame3_3)
        self.cmbKeySize.place(relx=0.205, rely=0.409, relheight=0.152
                , relwidth=0.643)
        self.cmbKeySize.configure(takefocus="")

        self.Frame3_4 = tk.Frame(top)
        self.Frame3_4.place(relx=0.48, rely=0.194, relheight=0.221
                , relwidth=0.225)
        self.Frame3_4.configure(relief='raised')
        self.Frame3_4.configure(borderwidth="2")
        self.Frame3_4.configure(relief="raised")
        self.Frame3_4.configure(background="#FFFFFF")
        self.Frame3_4.configure(highlightbackground="#d9d9d9")

        self.Frame3_4.configure(highlightthickness="2")
        self.Frame3_4.configure(width=125)

        self.TSeparator1_9 = ttk.Separator(self.Frame3_4)
        self.TSeparator1_9.place(relx=0.205, rely=0.702, relwidth=0.615)

        self.cmbAlgorithm = ttk.Combobox(self.Frame3_4)
        self.cmbAlgorithm.place(relx=0.246, rely=0.409, relheight=0.152
                , relwidth=0.643)
        self.cmbAlgorithm.configure(takefocus="")
        self.cmbAlgorithm['values'] = ("AES","DES","3DES","Blowfish","RC4")

        self.cmbAlgorithm.bind("<<ComboboxSelected>>", self.set_keySize)

        self.Frame4 = tk.Frame(top)
        self.Frame4.place(relx=0.221, rely=0.452, relheight=0.515
                , relwidth=0.364)
        self.Frame4.configure(relief='raised')
        self.Frame4.configure(borderwidth="2")
        self.Frame4.configure(relief="raised")
        self.Frame4.configure(background="#ffffff")
        self.Frame4.configure(highlightbackground="#d9d9d9")
        self.Frame4.configure(highlightcolor="#000000")
        self.Frame4.configure(highlightthickness="2")
        self.Frame4.configure(width=125)

        self.Frame4_5 = tk.Frame(self.Frame4)
        self.Frame4_5.place(relx=1.962, rely=1.015, relheight=1.0, relwidth=1.0)
        self.Frame4_5.configure(relief='raised')
        self.Frame4_5.configure(borderwidth="2")
        self.Frame4_5.configure(relief="raised")
        self.Frame4_5.configure(background="#ffffff")
        self.Frame4_5.configure(highlightbackground="#d9d9d9")
        self.Frame4_5.configure(highlightcolor="#000000")
        self.Frame4_5.configure(highlightthickness="2")
        self.Frame4_5.configure(width=125)

        self.Frame4_6 = tk.Frame(top)
        self.Frame4_6.place(relx=0.6, rely=0.452, relheight=0.515
                , relwidth=0.364)
        self.Frame4_6.configure(relief='raised')
        self.Frame4_6.configure(borderwidth="2")
        self.Frame4_6.configure(relief="raised")
        self.Frame4_6.configure(background="#ffffff")
        self.Frame4_6.configure(highlightbackground="#d9d9d9")
        self.Frame4_6.configure(highlightthickness="2")
        self.Frame4_6.configure(width=125)

        self.Frame4_1 = tk.Frame(self.Frame4_6)
        self.Frame4_1.place(relx=1.962, rely=1.015, relheight=1.0, relwidth=1.0)
        self.Frame4_1.configure(relief='raised')
        self.Frame4_1.configure(borderwidth="2")
        self.Frame4_1.configure(relief="raised")
        self.Frame4_1.configure(background="#ffffff")
        self.Frame4_1.configure(highlightbackground="#d9d9d9")
        self.Frame4_1.configure(highlightcolor="#000000")
        self.Frame4_1.configure(highlightthickness="2")
        self.Frame4_1.configure(width=125)

        self.Frame5 = tk.Frame(top)
        self.Frame5.place(relx=0.24, rely=0.142, relheight=0.086, relwidth=0.072)

        self.Frame5.configure(relief='raised')
        self.Frame5.configure(borderwidth="2")
        self.Frame5.configure(relief="raised")
        self.Frame5.configure(background="#06b0c5")
        self.Frame5.configure(highlightbackground="#d9d9d9")
        self.Frame5.configure(highlightthickness="1")
        self.Frame5.configure(width=105)

        self.Frame5_7 = tk.Frame(top)
        self.Frame5_7.place(relx=0.756, rely=0.142, relheight=0.086
                , relwidth=0.072)
        self.Frame5_7.configure(relief='raised')
        self.Frame5_7.configure(borderwidth="2")
        self.Frame5_7.configure(relief="raised")
        self.Frame5_7.configure(background="#e74d48")
        self.Frame5_7.configure(highlightbackground="#d9d9d9")
        self.Frame5_7.configure(highlightthickness="1")
        self.Frame5_7.configure(width=105)

        self.Frame5_8 = tk.Frame(top)
        self.Frame5_8.place(relx=0.498, rely=0.142, relheight=0.086
                , relwidth=0.072)
        self.Frame5_8.configure(relief='raised')
        self.Frame5_8.configure(borderwidth="2")
        self.Frame5_8.configure(relief="raised")
        self.Frame5_8.configure(background="#439c47")
        self.Frame5_8.configure(highlightbackground="#d9d9d9")
        self.Frame5_8.configure(highlightthickness="1")
        self.Frame5_8.configure(width=105)

if __name__ == '__main__':
    vp_start_gui()





